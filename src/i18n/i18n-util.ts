// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.
 

import {
	i18n as initI18n,
	i18nObject as initI18nObject,
	i18nString as initI18nString
} from 'typesafe-i18n';
import type { LocaleDetector } from 'typesafe-i18n/detectors';
import type { TranslateByString } from 'typesafe-i18n';
import { detectLocale as detectLocaleFn } from 'typesafe-i18n/detectors';
import { initExtendDictionary } from 'typesafe-i18n/utils';
import type { Formatters, Locales, Translations } from './i18n-types';

export const baseLocale: Locales = 'en';

export const locales: Locales[] = ['en', 'en-us', 'it', 'pt-br'];

export const isLocale = (locale: string): locale is Locales => locales.includes(locale as Locales);

export const loadedLocales: Record<Locales, Translations> = {} as Record<Locales, Translations>;

export const loadedFormatters: Record<Locales, Formatters> = {} as Record<Locales, Formatters>;

export const extendDictionary = initExtendDictionary<Translations>();

export const i18nString = (locale: Locales): TranslateByString =>
	initI18nString<Locales, Formatters>(locale, loadedFormatters[locale]);

export const i18nObject = (locale: Locales) =>
	initI18nObject(locale, loadedLocales[locale], loadedFormatters[locale]);

export const i18n = () => initI18n(loadedLocales, loadedFormatters);

export const detectLocale = (...detectors: LocaleDetector[]): Locales =>
	detectLocaleFn<Locales>(baseLocale, locales, ...detectors);
